#!crnn.py
# kate: syntax python;

use_tensorflow = True

import os
from Util import get_login_username


task = "train"
train = "/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0001,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0002,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0003,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0004,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0005,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0006,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0007,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0008,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0009,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/train.0010"

dev = "/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0001,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0002,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0003,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0004,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0005,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0006,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0007,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0008,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0009,/u/doetsch/env/data/rimes/words/files/pca.ctc/hdf5/valid.0010"

num_inputs = 20
num_outputs = 81
batching = "random"
batch_size = 10000
max_seqs = 10
# TODO: Figure out gpu
device = "gpu"
log_device_placement = True

network = {
"fw_0" : { "class" : "rec", "unit": "NativeLSTM", "n_out" : 512, "dropout" : 0.3, "direction" : 1 },
"bw_0" : { "class" : "rec", "unit": "NativeLSTM", "n_out" : 512, "dropout" : 0.3, "direction" : -1 },
"fw_1" : { "class" : "rec", "unit": "NativeLSTM", "n_out" : 512, "dropout" : 0.3, "direction" : 1, "from" : [ "fw_0", "bw_0" ] },
"bw_1" : { "class" : "rec", "unit": "NativeLSTM", "n_out" : 512, "dropout" : 0.3, "direction" : -1, "from" : [ "fw_0", "bw_0" ] },
"output": {"class": "neural_transducer", "loss": "neural_transducer", "from": ["fw_1", "bw_1"], "transducer_hidden_units":1024,
            "n_out":82, "transducer_max_width":8, "input_block_size":50, "embedding_size":20, "e_symbol_index":81, 
	    "use_prev_state_as_start":True,
            "loss_opts":{
                "debug":True
            }
          },
"output2": {"class": "softmax", "from": ["output"]}
}

# training
nadam = True
learning_rate = 0.0001
min_learning_rate = 0.000001
newbob_error_threshold = 0.002
newbob_learning_rate_decay = 0.8408964152537146
learning_rate_control = "newbob_abs"
model = "./final_model/rimes.50-8.2048.50.bilstm/"
num_epochs = 50
save_interval = 7
gradient_clip = 0

# log
log_verbosity = 5

#TODO: Make inference manager & test it


