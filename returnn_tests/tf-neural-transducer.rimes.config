#!crnn.py
# kate: syntax python;

use_tensorflow = True

import os
from Util import get_login_username


task = "train"
train = "/home/nikita/returnn_tests/data/train.0001,/home/nikita/returnn_tests/data/train.0002,/home/nikita/returnn_tests/data/train.0003,/home/nikita/returnn_tests/data/train.0004,/home/nikita/returnn_tests/data/train.0005,/home/nikita/returnn_tests/data/train.0006,/home/nikita/returnn_tests/data/train.0007,/home/nikita/returnn_tests/data/train.0008,/home/nikita/returnn_tests/data/train.0009,/home/nikita/returnn_tests/data/train.0010"
dev = "/home/nikita/returnn_tests/data/valid.0001,/home/nikita/returnn_tests/data/valid.0002,/home/nikita/returnn_tests/data/valid.0003,/home/nikita/returnn_tests/data/valid.0004,/home/nikita/returnn_tests/data/valid.0005,/home/nikita/returnn_tests/data/valid.0006,/home/nikita/returnn_tests/data/valid.0007,/home/nikita/returnn_tests/data/valid.0008,/home/nikita/returnn_tests/data/valid.0009,/home/nikita/returnn_tests/data/valid.0010"

num_inputs = 20
num_outputs = 82
batching = "random"
batch_size = 5000
max_seqs = 10

network = {
"fw0": {"class": "rec", "unit": "NativeLSTM", "n_out": 512},
"output": {"class": "neural_transducer", "loss": "neural_transducer", "from": ["fw0"], "transducer_hidden_units":512,
            "n_out":83, "transducer_max_width":8, "input_block_size":50, "embedding_size":20, "e_symbol_index":82, 
	    "use_prev_state_as_start":True,
            "loss_opts":{
                "debug":True
            }
          }
}

# training
nadam = True
learning_rate = 0.001
model = "/home/nikita/returnn_tests/model/"
num_epochs = 50
save_interval = 1
gradient_clip = 0

# log
log_verbosity = 5

#TODO: Make inference manager & test it


